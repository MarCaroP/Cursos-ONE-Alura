Lo que aprendimos en esta aula:

Utilizar el componente de calendario
Manipular fechas
Destructurar objetos en JavaScript

https://cdnjs.com/

Agrego en el index : 
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js" integrity="sha512-CryKbMe7sjSCDPl18jtJI5DR5jtkUWxPXWaLCst6QjH8wxDexfRJic2WRmRXmstr2Y8SxDDWuBO6CQC6IE4KTA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
 en el script:
  const dateFormat= moment(date).format('DD/MM/YYYY');



________________________________________________
Lo que aprendimos en esta aula:

Guardar las tareas en el navegador utilizando SessionStorage
Almacenar las tareas con LocalStorage
Transformar objetos en string utilizando JSON.stringify()

API es un término que las personas que trabajan con el desarrollo web utilizan todos los días, pero ¿sabes que es?

Yo mencioné que podemos acceder a métodos del navegador a través de interfaces, y ellas son las famosas APIs (Application Programming Interfaces), que son construcciones disponibles en los lenguajes de programación y permiten a los desarrolladores a crear funcionalidades complejas más fácilmente.

La documentación de Mozilla explica de forma clara que es una API:

“Piensa en el siguiente ejemplo: el uso de energía eléctrica en tu casa o departamento. Cuando deseas utilizar un electrodoméstico, solamente necesitas prender el aparato al enchufe. No es necesario conectar el cable del aparato directamente a la caja de control eléctrico, algo que además de muy ineficiente, difícil y peligroso (en el caso de que tu no seas electricista).

APIs de navegadores: hacen parte de tu navegador web y son capaces de exponer datos del navegador. Esas construcciones abstraen el código más complejo, proporcionando el uso de sintaxis más simples en su lugar, semejante a lo que momentjs hace, simplificando el trabajo con fechas.

El lenguaje de JavaScript, especialmente client-side, posee diversas APIs disponibles. Ellas no hacen parte del lenguaje en sí, pero son escritas sobre el core del lenguaje JavaScript, proviniendo superpoderes para ser utilizados en tu código.”.
https://developer.mozilla.org/es/docs/Learn/JavaScript/Client-side_web_APIs/Introduction


localStorage.setItem('tasks', JSON.stringify (datos))
 La manera correcta de transformar los datos en string es a través de JSON.stringify y aprovechamos para utilizar el setItem para almacenar los datos localmente.

se usa: 
|| en caso de que sea null darle formato, en este ejemplo del practico un arreglo. 
Durante el curso utilizamos pipe || para crear una nueva evaluación de cortocircuito( short circuit evaluation).
const tasks = JSON.parse(localStorage.getItem('tasks')) || [ ]
Con eso, le decimos a la aplicación que en caso de que localStorage este con datos se comporte de una manera, si en caso contrario estuviera vacío, la constante tasks empezaría como un arreglo vacío. Las expresiones lógicas son evaluadas de izquierda a derecha, luego, si la primera declaración sea verdadera se ejecuta normalmente y la segunda declaración no es aplicada, y si el primer es evaluado como falso, ejecutamos el segundo caso.

________________________________________________
Lo que aprendimos en esta aula:

Recorrer el arreglo con forEach() de las tareas guardadas en LocalStorage
Utilizar pipe
Convertir las tareas almacenadas en formato string a objetos con JSON.parse()


________________________________________________